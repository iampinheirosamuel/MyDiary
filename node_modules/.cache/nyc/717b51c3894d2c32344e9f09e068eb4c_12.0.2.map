{"version":3,"sources":["index.js"],"names":["express","require","app","bodyParser","use","urlencoded","extended","json","port","process","env","PORT","router","Router","req","res","next","entries","Set","route","post","today","Date","entry","body","name","content","created_at","toLocaleDateString","year","month","day","add","status","send","Response","get","size","params","entry_id","put","editEntry","listen","console","log"],"mappings":"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","file":"index.js","sourceRoot":"C:/Users/SamuelPinheiro/Downloads/Udacity/MyDiary/MyDiary/server","sourcesContent":["// calls modules\r\nconst express = require('express');\r\nconst app = express();          \r\nconst bodyParser = require('body-parser');\r\n// configure app to use body-parser\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json()); // parses json\r\nconst port = process.env.PORT || 8080; // set port\r\n\r\n// Routes for API\r\nconst router = express.Router();\r\n\r\n// middleware to use for all requests\r\nrouter.use((req, res, next) => { next(); });\r\n\r\n// Set Up Routes\r\n// create an entry for MyDiary\r\nconst entries = new Set([]);\r\nrouter.route('/entries').post((req, res) => {\r\n        const today = new Date();\r\n        const entry = {};\r\n        if (typeof req.body.name === 'string' && typeof req.body.content === 'string') {\r\n            entry.name = req.body.name;\r\n            entry.content = req.body.content;\r\n            entry.created_at = today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\r\n            entries.add(entry);\r\n            res.status(201).json({\r\n                entries: 'Entry added successfully',\r\n            });\r\n        } else {\r\n            return res.status(400).send({\r\n                Response: 'Bad Request',\r\n            }); // 400 Bad Request\r\n        }\r\n    });\r\n\r\n\r\n// get all entries for MyDiary\r\nrouter.route('/entries')\r\n    .get((req, res) => {\r\n        if (entries.size !== 0) {\r\n            return res.status(200).json([...entries]);\r\n        }\r\n        return res.status(400).send({\r\n            Response: 'Bad Request'\r\n        });\r\n\r\n\r\n    });\r\n\r\n// get an entry from MyDiary\r\nrouter.route('/entries/:entry_id')\r\n    .get((req, res) => {\r\n        if ([...entries][req.params.entry_id]) {\r\n            return res.status(200).json({\r\n                entry: [...entries][req.params.entry_id]\r\n            });\r\n        }\r\n        res.status(404).json({\r\n            Response: 'Not found'\r\n        });\r\n    });\r\n\r\n// modify an entry from MyDiary\r\nrouter.route('/entries/:entry_id')\r\n    .put((req, res) => {\r\n        const editEntry = [...entries][req.params.entry_id];\r\n        editEntry.name = req.body.name;\r\n        editEntry.content = req.body.content;\r\n        res.json({\r\n            entry: editEntry,\r\n        });\r\n    });\r\n\r\n// Register Routes\r\napp.use('/api/v1', router);\r\n\r\n// Start the Server\r\napp.listen(port);\r\nconsole.log(`server started at: ${port}`);\r\n"]}